#!/bin/bash
## 
## CONTRIBUTORS: 
## 
##     * Gabriel Gonzalez (gabeg@bu.edu) 
##     * MOCP developers
## 
## 
## LICENSE: 
## 
##     The MIT License (MIT)
## 
## 
## NAME:
## 
##     play - Music player extension.
## 
## 
## SYNTAX: 
## 
##     play [-h|--help] [--setup] [-P|--play|--pause] [-f|--forward] [-p|--previous] 
##         [-i|--info] [-x|--exit] [[-a|--add] [-r|--remove] <songs> <playlist>]
##         [[-l|--list] <playlist>] [[-s|--search] <song>] [[-q|--queue] <songs>] 
##         [[-mp|--music-player] <command>] [<playlist>]
## 
## 
## PURPOSE:
## 
##     An extension to the music on console player (mocp) where you can 
##     create a playlist, add songs to a playlist, print the songs in a playlist, 
##     and search for a song to play.
## 
## 
## OPTIONS:
## 
##     -h, --help
##         Print program usage.
## 
##     -P, --play, --pause
##         Toggle play/pause.
## 
##     -f, --forward
##         Play next song.
## 
##     -p, --previous
##         Play previous song.
## 
##     -i, --info
##         Print current song information.
## 
##     -x, --exit
##         Quit the music player.
## 
##     -a, --add <songs> <playlist>
##         Add the specified songs to the playlist.
## 
##     -r, --remove <songs> <playlist>
##         Remove the specified songs from the playlist.
## 
##     -l, --list <playlist>
##         Print a list of the songs in the specified playlist.
## 
##     -s, --search <song>
##         Search for and play the specified song.
## 
##     -q, --queue <songs>
##         Queue songs onto the current playlist.
## 
##     -mp, --music-player <command>
##         Execute commands using the actual music player.
## 
##     <playlist>,
##         Playlist abbreviation, or full name, that is found in the playlist 
##         preferences file.
## 
## 
## FUNCTIONS:
## 
##     print_usage                  - Print program usage.
## 
##     is_player_running            - Check if music player is running.
##     is_playlist                  - Check if specified playlist is correct.
##     check_playlist               - Verify playlist abbreviation.
## 
##     get_playlist_path            - Return the playlist path.
## 
##     playlist_add_song            - Add songs to the specified playlist.
##     playlist_remove_song         - Remove songs from the specified playlist.
## 
##     library_song_search          - Search entire library for the given song.
## 
##     music_player_setup           - Setup the music player preferences files.
##     music_player_start           - Start the music player.
##     music_player_play            - Toggle play/pause.
##     music_player_forward         - Play next song.
##     music_player_previous        - Play previous song.
##     music_player_info            - Display info on current song.
##     music_player_exit            - Quit the music player.
##     music_player_playlist_modify - Add/remove songs to the specified playlist.
##     music_player_list_music      - Display all playlists or all songs in the 
##                                    specified playlist.  
##     music_player_search          - Search for a song in the library.
##     music_player_queue           - Queue the specified songs onto the current 
##                                    playlist.
##     music_player_commands        - Execute commands using the actual music player.
##     music_player_playlist_play   - Play the specified playlist.
## 
## 
## FILE STRUCTURE:
## 
##     * Print Program Usage
##     * Check Music Parameters
##     * Playlist Information 
##     * Modify Playlists
##     * Search For Song In Library
##     * Music Player Commands
##     * Music Player Interface
## 
## 
## MODIFICATION HISTORY:
## 	
##     gabeg Sep 19 2013 <> Created.
## 
##     gabeg May 27 2014 <> Added help.sh capabilities.
## 
##     gabeg Jun 23 2014 <> Added more functions to increase readability. 
##                          removed help.sh and added my own function to 
##                          print the header. 
## 
##     gabeg Jun 24 2014 <> Added more comments, and added 'add-to-playlist' 
##                          functionality.
## 
##     gabeg Oct 14 2014 <> Added two playlists: "john" and "repeat", and made it so 
##                          that the "find playlist directory" function is more 
##                          general.
## 
##     gabeg Jan 15 2015 <> Removed the functions "is_opt_order", "order_check",
##                          "option_count", "remove_pid_lock", and "run_option".
##                          Removed the "seek" and "volume" options. Combined the
##                          "play-add", "play-look", and "play-search" added them to
##                          this program. Renamed all the functions to be clearer as
##                          to what they do. Added global variables. Updated
##                          documentation.
## 
##     gabeg Mar 28 2015 <> Made the main function look cleaner by adding everything 
##                          into its own function. Removed functions that were no 
##                          longer needed and made "library_song_search" more usable
##                          by just having it set a variable to the song that is 
##                          found. Made it so that this program can queue songs into
##                          the current playlist. Also made it so that it can execute 
##                          commands using the actual music player. The functions 
##                          read in songs (add, remove, search, and queue) now use 
##                          the "library_song_search" function so that the user does
##                          not always have to know the full path of the song.
## 
## 
## NOTICE: 
## 
##     I did not write any of the MOCP software, thus I cannot take credit for that 
##     code. The MOCP license might not use The MIT License (MIT), thus this license 
##     only applies to the lines of code that do not contain the "mocp" command.
## 
## **********************************************************************************



## ================
## GLOBAL VARIABLES
## ================

## Change array delimeter
IFS=$'\n'

## Program information
ARGV=("$@")
PROG_NAME=`basename $0`
PROG_DIR=`echo "$0" | sed "s/\/${PROG_NAME}$//"`

## Preference files
MUSIC_PREF_FILE="${PROG_DIR}/pref/music.pref"
LIBRARY_PREF_FILE="${PROG_DIR}/pref/lib.pref"
PLAYLIST_PREF_FILE="${PROG_DIR}/pref/playlists.pref"

## Directories
MUSIC_DIR=`head -1 "${MUSIC_PREF_FILE}"`
LIBRARY_DIR=`head -1 "${LIBRARY_PREF_FILE}"`

## Music player variables
MUSIC_PLAYER="mocp"
PLAYLIST_NAME=""
PLAYLIST_PATH=""
SEARCH_SONG=""



## ###############################
## ##### PRINT PROGRAM USAGE #####
## ###############################

## Displays the help screen
function print_usage {
    echo "Usage: ${PROG_NAME} [-h|--help] [--setup] [-P|--play|--pause]"
    echo -e "\t[-f|--forward] [-p|--previous] [-i|--info] [-x|--exit]"
    echo -e "\t[[-a|--add] [-r|--remove] <songs> <playlist>]"
    echo -e "\t[[-l|--list] <playlist>] [[-s|--search] <song>]"
    echo -e "\t[[-q|--queue] <songs>] [[-mp|--music-player] <command>] [<playlist>]"
    exit 1
}



## ##################################
## ##### CHECK MUSIC PARAMETERS #####
## ##################################

## Check if music player is running
function is_player_running {
    running=`pgrep -c "${MUSIC_PLAYER}"`
    
    if [ "${running}" -eq 0 ]; then
        echo false
    else
        echo true
    fi
}



## Check if specified playlist key is correct
function is_playlist {
    key=`cut -s -f1 -d'-' "${PLAYLIST_PREF_FILE}" \
             | sed 's/[ \t]*$//' \
             | grep -x -c "${PLAYLIST_NAME}"`
    
    name=`cut -s -f2 -d'-' "${PLAYLIST_PREF_FILE}" \
              | sed 's/^[ \t]*//' \
              | grep -x -c "${PLAYLIST_NAME}"`
    
    if [ "${key}" -eq 1 -o "${name}" -eq 1 ]; then
        echo true
    else
        echo false
    fi
}



## Check input playlist abbreviation
function check_playlist {
    if [ `is_playlist` == false ]; then
        echo "${PROG_NAME}: No playlist found for '${PLAYLIST_NAME}'."
        exit 1
    fi
    
    if [ ! -d "${PLAYLIST_PATH}" ]; then 
        echo "${PROG_NAME}: Directory path for '${PLAYLIST_NAME}' does not exist."
        exit 1
    fi
}



## ################################
## ##### PLAYLIST INFORMATION #####
## ################################

## Get path to playlist directory
function get_playlist_path {
    name=`grep "${PLAYLIST_NAME}" "${PLAYLIST_PREF_FILE}" \
                    | cut -f2 -d'-' \
                    | sed 's/^[ \t]*//'`
    
    if [ ! -z "${name}" ] && [ ! -z "${PLAYLIST_NAME}" ]; then
	    echo "${MUSIC_DIR}/${name}"
    else
        echo "Empty"
    fi
}



## ############################
## ##### MODIFY PLAYLISTS #####
## ############################

## Add songs to the specified playlist
function playlist_add_song {
    
    ## Add songs to the playlist
    n=$[ $1 - 1 ]
    
    for song in "${ARGV[@]:1:${n}}"; do
        song_path="$(pwd)/${song}"
        
        ## Song directory specified
        if [ -f "${song}" ]; then
            if [ -f "${song_path}" ]; then
                loc="${song_path}"
            else
                loc="${song}"
            fi
            
            ## Create the symbolic link
            ln -v -s "${loc}" "${PLAYLIST_PATH}/$(basename ${song})"
        else
            
            ## Find song directory in library
            library_song_search "${song}"
            
            ## Create the symbolic link
            if [ $? -eq 0 ]; then
                ln -v -s "${SEARCH_SONG}" "${PLAYLIST_PATH}/$(basename ${SEARCH_SONG})"
            fi
        fi
    done
}



## Remove songs from the specified playlist
function playlist_remove_song {
    
    ## Remove songs from the playlist
    n=$[ $1 - 1 ]
    
    for song in "${ARGV[@]:1:${n}}"; do
        song_path="${PLAYLIST_PATH}/$(basename ${song})"
        
        if [ -f "${song_path}" ]; then
            rm -i "${song_path}"
        fi
    done
}



## ######################################
## ##### SEARCH FOR SONG IN LIBRARY #####
## ######################################

## Search for a song in the library
function library_song_search {
    
    ## Song to search for
    search="${ARGV[1]}"
    
    if [ -z "${ARGV[1]}" ]; then
        echo "What song do you want to search for?"
        read -p "> " search
        echo
    fi
    
    ## Songs in library that match search
    matches=(`find "${LIBRARY_DIR}" | grep -i "${search}"`)
    
    ## Choose what to do depending on number of matches found
    case ${#matches[@]} in
        
        ## No matches found
        0)
            echo -e "${PROG_NAME}: No songs found matching '${search}'."
            return 1
            ;;
        
        ## One match found
        1) ;;
        
        ## Multiple matches found
        [2-9]|1[0-9]) 
            
            ## Print matches
            echo -e "Results for '${search}' found:"
            
            for song in "${matches[@]}"; do 
                echo "$(basename ${song})"
            done | grep -n --color=always ""
            
            echo -e "\nEnter a number, or hit [ENTER] to skip."                      
            ;;
        
        ## Too many results found
        *)
            echo -e "${PROG_NAME}: Too many results found matching '${search}'." 
            return 1
            ;;
    esac    
    
    
    ## Determine song number
    if [ ${#matches[@]} -gt 1 ]; then
        read -p "> " num
        echo
    elif [ ${#matches[@]} -eq 1 ]; then
        num=1
    fi
    
    ## Make sure input is a valid number
    if [ -z "${num}" ]; then 
        echo ":: Exiting...Done"
        return 1
    elif [ ${num} -gt ${#matches[@]} -o ${num} -lt 1 ] 2> /dev/null; then
        echo "${PROG_NAME}: Invalid number '${num}' entered."
        return 1
    fi
    
    ## Determine song path
    index=$[ ${num} - 1 ]
    song_path="${matches[${index}]}"
    
    ## Update the search song variable
    echo -e "Match located here: ${song_path}"
    
    SEARCH_SONG="${song_path}"
    return 0
}



## #################################
## ##### MUSIC PLAYER COMMANDS #####
## #################################

## Program setup
function music_player_setup {
    
    ## Modify pref file containing playlist names and keys
    echo "Where are your music playlists located?"
    read -p "> " mp
    
    if [ ! -z "${mp}" ]; then 
        echo -n ":: Modifying playlist preference file..."
        echo "${mp}" > "${MUSIC_PREF_FILE}"
        echo "Done."
    else
        echo "${PROG_NAME}: Music playlist preference file unchanged."
    fi
    
    ## Modify pref file containing music library location
    echo "Where is your music library located?"
    read -p "> " ml
    
    if [ ! -z "${ml}" ]; then 
        echo "${ml}" > "${LIBRARY_PREF_FILE}"
    else
        echo -n ":: Modifying music library preference file..."
        echo "${PROG_NAME}: Music library preference file unchanged."
        echo "Done."
    fi
    
    exit 0
}



## Start the music player
function music_player_start {
    
    ## Startup music player
    if `is_player_running`; then
        ${MUSIC_PLAYER} -c
    else
        ${MUSIC_PLAYER} -S &>/dev/null
        ${MUSIC_PLAYER} -c
        ${MUSIC_PLAYER} -t shuffle 
    fi 
}



## Toggle play/pause
function music_player_play {
    ${MUSIC_PLAYER} -G
}



## Play next song
function music_player_forward {
    ${MUSIC_PLAYER} -f
}



## Play previous song
function music_player_previous {
    ${MUSIC_PLAYER} -r
}



## Display current song info
function music_player_info {
    ${MUSIC_PLAYER} -i
}



## Exit the music player
function music_player_exit {
    if [ `is_player_running` == false ]; then
        echo "${PROG_NAME}: '${MUSIC_PLAYER}' is not running."
        exit 1
    fi
    
    ${MUSIC_PLAYER} -x
}



## Modify a playlist by adding/removing songs
function music_player_playlist_modify {
    
    ## Playlist attributes
    n=$[ ${#ARGV[@]} - 1 ]
    PLAYLIST_NAME="${ARGV[${n}]}"
    PLAYLIST_PATH=`get_playlist_path`
    
    check_playlist
    
    ## Add songs to the playlist
    if [[ "${ARGV[0]}" == "-a" || "${ARGV[0]}" == "--add" ]]; then 
        playlist_add_song "${n}"
    fi
    
    ## Remove songs from the playlist
    if [[ "${ARGV[0]}" == "-r" || "${ARGV[0]}" == "--remove" ]]; then 
        playlist_remove_song "${n}"
    fi
}



## List songs in a playlist, or list all playlists
function music_player_list_music {
    
    ## Playlist attributes
    PLAYLIST_NAME="${ARGV[1]}"
    PLAYLIST_PATH=`get_playlist_path`
    
    ## Print songs/playlists
    if [ ! -z "${PLAYLIST_NAME}" ]; then
        
        ## Look up songs in playlist    
        check_playlist
        
        song_list=(`find "${PLAYLIST_PATH}/"`) 
        n=$[ ${#song_list} - 1 ]
        
        ## Print songs
        echo ":: Listing songs in '$(basename "${song_list[0]}")'..." 
        
        for song in "${song_list[@]:1:$n}"; do
            echo "$(basename ${song})"
        done
    else
        
        ## Print playlists
        echo ":: Listing playlists..."
        
        sed "1,1d" "${PLAYLIST_PREF_FILE}"
    fi
}



## Search for a song in the music library
function music_player_search {
    music_player_start 
    library_song_search "${ARGV[1]}"
    
    if [ $? -eq 0 ]; then
        ${MUSIC_PLAYER} -a "${SEARCH_SONG}"
        ${MUSIC_PLAYER} -p
    fi
}



## Queue songs into the current playlist 
function music_player_queue {
    if [ `is_player_running` == false ]; then
        music_player_start
    fi
    
    library_song_search "${ARGV[1]}"
    
    if [ $? -eq 0 ]; then
        echo -n ":: Adding '$(basename ${SEARCH_SONG})' to the queue..."
        ${MUSIC_PLAYER} -a "${SEARCH_SONG}"
        echo "Done."
    fi
}



## Execute commands using the music player
function music_player_commands {
    n=$[ ${#ARGV[@]} - 1 ]
    
    ${MUSIC_PLAYER} "${ARGV[@]:1:${n}}"
}



## Play the playlist
function music_player_playlist_play {
    
    ## Playlist attributes
    PLAYLIST_NAME="${ARGV[0]}"
    PLAYLIST_PATH=`get_playlist_path`
    
    ## Setup music player
    check_playlist
    music_player_start
    
    ## Play playlist songs
    echo -n ":: Playing '${PLAYLIST_NAME}'..."
    ${MUSIC_PLAYER} -a "${PLAYLIST_PATH}"
    ${MUSIC_PLAYER} -p
    echo "Done."
}



## ##################################
## ##### MUSIC PLAYER INTERFACE #####
## ##################################

## Music player options
function main {
    
    ## Parameter option check
    case "${ARGV[0]}" in
        
        ## Prints program usage
	    "-h"|"--help") 
            print_usage
            ;;
        
        ## Run music extension setup
        "--setup")
            music_setup
            ;;
        
        ## Start the music player
        "")
            echo -n ":: Starting the music player..."
            music_player_start
            echo "Done."
            ;;
        ## Toggle Play/Pause
	    "-P"|"--play"|"--pause") 
            music_player_play
            ;;
        
	    ## Next Song
	    "-f"|"--forward") 
            music_player_forward
            ;;
        
	    ## Previous Song
	    "-p"|"--previous") 
            music_player_previous
            ;;
        
	    ## Print Current Song Information
	    "-i"|"--info") 
            music_player_info
            ;;
	    
        ## Quit the music player
        "-x"|"--exit") 
            music_player_exit
            ;;
        
        ## Add/remove songs from a playlist
        "-a"|"--add"|"-r"|"--remove") 
            music_player_playlist_modify
            ;;
        
        ## Print playlist songs
        "-l"|"--list") 
            music_player_list_music
            ;;
        
        ## Searches For A Song (specified by user)
	    "-s"|"--search") 
            music_player_search
            ;;
        
        ## Searches For A Song (specified by user)
	    "-q"|"--queue") 
            music_player_queue
            ;;
        
        ## Execute a command using the actual music player
        "-mp"|"--music-player") 
            music_player_commands
            ;;
        
	    *) 
            music_player_playlist_play
            ;;
    esac
    
    exit 0
}



## Music player
main 
