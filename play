#!/bin/bash
## **********************************************************************************
## 
## Name:    play
## Author:  Gabriel Gonzalez, MOCP Developers
## Email:   gabeg@bu.edu
## License: The MIT License (MIT)
## 
## Syntax: play [option] [argument]
##         
## Description: Music On Console Player (MOCP) extension, capable of creating
##              playlists, adding/removing songs from a playlist, list songs in
##              a playlist, queue songs en masse, and more!
## 
## Notes: None.
## 
## Notice: I did not write any of the MOCP software, thus I cannot take credit
##         for that code. The MOCP license might not use The MIT License (MIT),
##         thus this license only applies to the lines of code that do not
##         contain the "mocp" command.
## 
## **********************************************************************************

## ================
## GLOBAL VARIABLES
## ================

## Change array delimeter
IFS=$'\n'

## Program information
ARGV=("$@")
PROG_NAME=`basename $0`
PROG_DIR=`echo "$0" | sed "s/\/${PROG_NAME}$//"`

## Music player variables
MUSIC_PLAYER="mocp"
PLAYLIST_NAME=""
PLAYLIST_PATH=""
SEARCH_SONG=""

## Preference files
MUSIC_PREF_FILE="${PROG_DIR}/config/music.config"
LIBRARY_PREF_FILE="${PROG_DIR}/config/lib.config"
PLAYLIST_PREF_FILE="${PROG_DIR}/config/playlists.config"

## Directories
MUSIC_DIR=`head -1 "${MUSIC_PREF_FILE}"`
LIBRARY_DIR=`head -1 "${LIBRARY_PREF_FILE}"`



## ##################################
## ##### MUSIC PLAYER INTERFACE #####
## ##################################

## Music player options
main() {
    case "${ARGV[0]}" in
        ""|"-h"|"--help") 
            usage
            exit 0
            ;;
        "--setup")
            music_player_setup
            ;;
        "-p"|"--play"|"--pause") 
            music_player_play
            ;;
        "-f"|"--forward") 
            music_player_forward
            ;;
        "-b"|"--backward") 
            music_player_backward
            ;;
        "-i"|"--info") 
            music_player_info
            ;;
        "-x"|"--exit") 
            music_player_exit
            ;;
        "-P"|"--playlist") 
            music_player_playlist_play "${ARGV[1]}"
            ;;
        "-l"|"--list") 
            music_player_list_music "${ARGV[1]}"
            ;;
        "-s"|"--search") 
            music_player_search "${ARGV[1]}"
            ;;
        "-q"|"--queue") 
            music_player_queue "${ARGV[@]}"
            ;;
        "-a"|"--add")
            music_player_playlist_add_music "${ARGV[@]}"
            ;;
        "-r"|"--remove") 
            music_player_playlist_remove_music "${ARGV[@]}"
            ;;
        *)
            usage
            exit 1
    esac

    exit 0
}



## #########################
## ##### PROGRAM USAGE #####
## #########################

## Print program usage
usage() {
    echo "Usage: ${PROG_NAME} [option] [argument]"
    echo
    echo "Options:"
    echo -e "\t-h, --help                   Print program usage."
    echo -e "\t--setup                      Run the music player config setup."
    echo
    echo -e "\t-p, --play, --pause          Toggle play/pause."
    echo -e "\t-f --forward                 Play next song."
    echo -e "\t-b --backward                Play previous song."
    echo -e "\t-i, --info                   Print current song information."
    echo -e "\t-x, --exit                   Exit the music player."
    echo
    echo -e "\t-P, --playlist <playlist>    Play the playlist."
    echo -e "\t-l, --list <list>            Print the songs in the playlist."
    echo -e "\t-s, --search <search>        Search for a song in the library and play it."
    echo -e "\t-q, --queue <queue>          Add songs to the queue."
    echo -e "\t-a, --add <playlist>         Add songs to the playlist."
    echo -e "\t-r, --remove <playlist>      Remove songs from the playlist."
    echo 
    echo "Arguments:"
    echo -e "\t<playlist>                   Playlist key or name, see '${PROG_NAME} -l' for more info."
    echo -e "\t<list>                       Playlist to print the songs. Can be '' (to mean empty), 'all', or the playlist key/name."
    echo -e "\t<search>                     Song to search for."
    echo -e "\t<queue>                      Directory or songs to add to the playlist."
}



## #######################
## ##### MUSIC SETUP #####
## #######################

## Music setup
music_player_setup() {
    echo "Where are your music playlists located?"
    read -p "> " mp
    if [ ! -z "${mp}" ]; then
        content=`head -1 "${MUSIC_PREF_FILE}"`
        echo -n ":: Modifying music config file..."
        echo "${mp}" > "${MUSIC_PREF_FILE}"
        echo "Done."
        echo "'${content}' -> '${mp}'"
    else
        echo "${PROG_NAME}: Music playlist config file unchanged."
    fi

    echo "Where is your music library located?"
    read -p "> " ml
    if [ ! -z "${ml}" ]; then 
        content=`head -1 "${LIBRARY_PREF_FILE}"`
        echo -n ":: Modifying music library config file..."
        echo "${ml}" > "${LIBRARY_PREF_FILE}"
        echo "Done."
        echo "'${content}' -> '${ml}'"

    else
        echo "${PROG_NAME}: Music library config file unchanged."
    fi
    
    exit 0
}



## #################################
## ##### DEFAULT MOCP COMMANDS #####
## #################################

## Toggle play/pause
music_player_play() {
    status=`is_player_playing`
    ${MUSIC_PLAYER} -G
    if [ "${status}" == false ]; then 
        if [ "$(is_player_playing)" == false ]; then
            ${MUSIC_PLAYER} -p
        fi
    fi
}

## Play next song
music_player_forward() {
    ${MUSIC_PLAYER} -f
}

## Play previous song
music_player_backward() {
    ${MUSIC_PLAYER} -r
}

## Display current song info
music_player_info() {
    ${MUSIC_PLAYER} -i
}

## Exit the music player
music_player_exit() {
    if [ "$(is_player_running)" == false ]; then
        echo "${PROG_NAME}: '${MUSIC_PLAYER}' is not running."
        exit 1
    fi

    ${MUSIC_PLAYER} -x
}



## #########################
## ##### PLAY PLAYLIST #####
## #########################

## Play the playlist
music_player_playlist_play() {
    PLAYLIST_NAME="${1}"
    PLAYLIST_PATH=`get_playlist_path` || exit 1

    music_player_start

    echo -n ":: Playing '${PLAYLIST_NAME}'..."
    ${MUSIC_PLAYER} -a "${PLAYLIST_PATH}"
    ${MUSIC_PLAYER} -p
    echo "Done."
}



## ################################
## ##### PRINT PLAYLIST SONGS #####
## ################################

## List songs in a playlist, or list all playlists
music_player_list_music() {
    case "${1}" in
        "")
            echo ":: Listing playlists..."
            cat "${PLAYLIST_PREF_FILE}"
            ;;

        "all")
            dirs=(`cut -s -f2 -d'-' "${PLAYLIST_PREF_FILE}" | sed 's/^[ \t]*//'`)
            for playlist in "${dirs[@]}"; do
                PLAYLIST_NAME="${playlist}"
                PLAYLIST_PATH="${MUSIC_DIR}/${playlist}"
                print_playlist_songs
                echo
            done
            ;;

        *)
            PLAYLIST_NAME="${1}"
            PLAYLIST_PATH=`get_playlist_path` || exit 1
            print_playlist_songs
            ;;
    esac
}



## ########################
## ##### SONG SEARCH ######
## ########################

## Search for a song in the music library
music_player_search() {
    library_song_search "${1}"

    if [ $? -eq 0 ]; then
        music_player_start
        ${MUSIC_PLAYER} -a "${SEARCH_SONG}"
        ${MUSIC_PLAYER} -p
    fi
}



## #############################
## ##### ADD/REMOVE SONGS ######
## #############################

## Queue songs into the current playlist 
music_player_queue() {
    if [ "$(is_player_running)" == false ]; then
        music_player_start
    fi

    input=("$@")
    first=1
    last=$#
    for song in "${input[@]:${first}:${last}}"; do
        if [ -e "${song}" ]; then
            SEARCH_SONG="${song}"
        else
            library_song_search "${song}"
        fi

        if [ $? -eq 0 ]; then
            echo -n ":: Adding '$(basename ${SEARCH_SONG})' to the queue..."
            ${MUSIC_PLAYER} -a "${SEARCH_SONG}"
            echo "Done."
        fi
    done
}



## Add songs to the specified playlist
music_player_playlist_add_music() {
    n=$[ $# - 1 ]
    PLAYLIST_NAME="${ARGV[${n}]}"
    PLAYLIST_PATH=`get_playlist_path` || exit 1

    input=("$@")
    first=1
    last=$[ ${n} - 1 ]
    for song in "${input[@]:${first}:${last}}"; do
        song_path="$(pwd)/${song}"
        if [ -f "${song}" ]; then
            if [ -f "${song_path}" ]; then
                loc="${song_path}"
            else
                loc="${song}"
            fi

            ln -v -s "${loc}" "${PLAYLIST_PATH}/$(basename ${song})"
        else
            library_song_search "${song}"
            if [ $? -eq 0 ]; then
                ln -v -s "${SEARCH_SONG}" "${PLAYLIST_PATH}/$(basename ${SEARCH_SONG})"
            fi
        fi
    done
}



## Remove songs from the specified playlist
music_player_playlist_remove_music() {
    n=$[ $# - 1 ]
    PLAYLIST_NAME="${ARGV[${n}]}"
    PLAYLIST_PATH=`get_playlist_path` || exit 1

    input=("$@")
    first=1
    last=$[ ${n} - 1 ]
    for song in "${ARGV[@]:1:${n}}"; do
        song_path="${PLAYLIST_PATH}/$(basename ${song})"
        if [ -f "${song_path}" ]; then
            rm -i "${song_path}"
        fi
    done
}



## ##################################
## ##### MUSIC PLAYER UTILITIES #####
## ##################################

## Start the music player
music_player_start() {
    if [ "$(is_player_running)" == true ]; then
        ${MUSIC_PLAYER} -c
    else
        ${MUSIC_PLAYER} -S 1>/dev/null
        ${MUSIC_PLAYER} -c
        ${MUSIC_PLAYER} -t shuffle 
    fi 
}



## Print playlist songs
print_playlist_songs() {
    verify_playlist

    song_list=(`find "${PLAYLIST_PATH}/"`) 
    n=$[ ${#song_list[@]} - 1 ]

    echo ":: Listing songs in '$(basename "${song_list[0]}")'..." 
    for song in "${song_list[@]:1:${n}}"; do
        echo "$(basename ${song})"
    done
}



## Search for a song in the library
library_song_search() {
    search="${1}"
    if [ -z "${search}" ]; then
        echo "What song do you want to search for?"
        read -p "> " search
        echo
    else
        if [ -f "${search}" ]; then
            SEARCH_SONG="${search}"
            return
        fi
    fi
    
    ## Songs in library that match search
    matches=(`find "${LIBRARY_DIR}" -iname "*${search}*"`)
    case ${#matches[@]} in
        0)
            echo -e "${PROG_NAME}: No songs found matching '${search}'."
            return 1
            ;;
        1) 
            ;;
        [2-9]|1[0-9]) 
            echo -e "Results for '${search}' found:"
            for song in "${matches[@]}"; do 
                echo "$(basename ${song})"
            done | grep -n --color=always ""

            echo -e "\nEnter a number, or hit [ENTER] to skip."
            ;;
        *)
            echo -e "${PROG_NAME}: Too many results found matching '${search}'." 
            return 1
            ;;
    esac    

    ## Make sure input is a valid number
    if [ ${#matches[@]} -gt 1 ]; then
        read -p "> " num
        echo
    elif [ ${#matches[@]} -eq 1 ]; then
        num=1
    fi
    if [ -z "${num}" ]; then 
        echo ":: Exiting...Done"
        return 1
    elif [ ${num} -gt ${#matches[@]} -o ${num} -lt 1 ] 2> /dev/null; then
        echo "${PROG_NAME}: Invalid number '${num}' entered."
        return 1
    fi

    ## Search song complete
    index=$[ ${num} - 1 ]
    song_path="${matches[${index}]}"
    # echo -e "Match located here: ${song_path}"
    SEARCH_SONG="${song_path}"

    return 0
}



## Get path to playlist directory
get_playlist_path() {
    contents=(`sed "1,1d" "${PLAYLIST_PREF_FILE}"`)
    flag=false
    
    for line in "${contents[@]}"; do
        key=`echo "${line}" \
                 | cut -f1 -d'-' \
                 | sed 's/[ \t]*$//'`
        name=`echo "${line}" \
                  | cut -f2 -d'-' \
                  | sed 's/^[ \t]*//'`

        if [[ "${key}" == "${PLAYLIST_NAME}" || "${name}" == "${PLAYLIST_NAME}" ]]; then
            flag=true
            break
        fi
    done

    if [ ${flag} == true ]; then
        echo "${MUSIC_DIR}/${name}"
    else
        verify_playlist 1>&2
    fi
}



## #####################################
## ##### CHECK MUSIC PLAYER STATUS #####
## #####################################

## Check if music player is running
is_player_running() {
    running=`pgrep -c "${MUSIC_PLAYER}"`
    if [ "${running}" -eq 0 ]; then
        echo false
    else
        echo true
    fi
}



## Check if music player is running
is_player_playing() {
    dir="/proc/asound/card*/pcm*/sub*/status"
    running=(`grep -c -i -h RUNNING ${dir} 2> /dev/null`)
    ret=
    for status in "${running[@]}"; do
        if [ "${status}" -gt 0 ]; then
            ret=true
            break
        fi
    done
    if [ -z "${ret}" ]; then
        ret=false
    fi

    echo "${ret}"
}



## Check if specified playlist is correct
is_playlist() {
    if [ -z "${PLAYLIST_PATH}" ]; then
        echo false
    else
        echo true
    fi
}



## Check input playlist abbreviation
verify_playlist() {
    if [ "$(is_playlist)" == false ]; then
        echo "${PROG_NAME}: No playlist found for '${PLAYLIST_NAME}'."
        exit 1
    fi

    if [ ! -d "${PLAYLIST_PATH}" ]; then 
        echo "${PROG_NAME}: Directory path for '${PLAYLIST_NAME}' does not exist."
        exit 1
    fi
}



## ======================
## Run the MOCP Extension
## ======================

main 
